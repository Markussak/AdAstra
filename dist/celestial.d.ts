import { ICelestialBody, IRenderer, ICamera, Vector2D, CelestialBodyType, SurfaceFeature } from './types';
export declare class CelestialBody implements ICelestialBody {
    position: Vector2D;
    velocity: Vector2D;
    angle: number;
    radius: number;
    active: boolean;
    type: CelestialBodyType;
    name: string;
    mass: number;
    color: string;
    rotationSpeed: number;
    rotation: number;
    orbitDistance: number;
    orbitSpeed: number;
    orbitAngle: number;
    orbitCenter: Vector2D | null;
    orbitEccentricity: number;
    periapsis: number;
    apoapsis: number;
    semiMajorAxis: number;
    meanAnomaly: number;
    meanMotion: number;
    centralBodyMass: number;
    hasAtmosphere: boolean;
    atmosphereColor: string | null;
    atmosphereRadius: number;
    surfaceFeatures: SurfaceFeature[];
    private surfaceMap;
    private normalMap;
    private shadowMap;
    private uniqueFeatures;
    private textureResolution;
    constructor(x: number, y: number, radius: number, type: CelestialBodyType, name: string, mass?: number, color?: string);
    private generateRealisticSphere;
    private generateUniqueSurface;
    private generateSurfaceFeatures;
    private applyFeatureToSurface;
    private calculateSphereGeometry;
    private applyRealisticLighting;
    private perlinNoise;
    private fade;
    private lerp;
    private hash;
    private grad;
    private getBaseColorPalette;
    private generateAtmosphereColor;
    setOrbit(center: Vector2D, distance: number, centralMass: number, startAngle?: number, eccentricity?: number): void;
    private updateOrbitalPosition;
    update(deltaTime: number): void;
    isVisible(camera: ICamera, screenWidth: number, screenHeight: number): boolean;
    render(renderer: IRenderer, camera: ICamera): void;
    private renderOrbitPath;
    private renderRealistic16BitSphere;
    private renderStellarCorona;
    private renderGeneric;
}
