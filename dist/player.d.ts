import { IPlayerShip, IRenderer, ICamera, Vector2D, ShipSystemType, WeaponType, ShipSystem, Weapon, ShipComponent, CargoItem } from './types';
export declare class PlayerShip implements IPlayerShip {
    position: Vector2D;
    velocity: Vector2D;
    angle: number;
    angularVelocity: number;
    radius: number;
    active: boolean;
    mass: number;
    spriteKey: string | null;
    systems: Map<ShipSystemType, ShipSystem>;
    components: ShipComponent[];
    weapons: Map<WeaponType, Weapon>;
    selectedWeapon: WeaponType;
    hull: number;
    maxHull: number;
    shields: number;
    maxShields: number;
    shieldRegenRate: number;
    shieldRegenDelay: number;
    lastDamageTime: number;
    fuel: number;
    maxFuel: number;
    energy: number;
    maxEnergy: number;
    warpCharge: number;
    maxWarpCharge: number;
    isWarping: boolean;
    inertialDampers: boolean;
    thrust: number;
    maxThrust: number;
    rotationSpeed: number;
    cargoItems: Map<string, CargoItem>;
    cargoWeight: number;
    maxCargoWeight: number;
    constructor(x: number, y: number);
    private initializeSystems;
    private initializeWeapons;
    private initializeComponents;
    update(deltaTime: number, game: any): void;
    private updateMotionEffects;
    private applyInertialDampening;
    private handleInput;
    private updateSystems;
    private updateWeapons;
    fireWeapon(): void;
    private createWeaponEffect;
    private getWeaponColor;
    private createEngineParticleEffects;
    render(renderer: IRenderer, camera: ICamera): void;
    private renderHull;
    private renderEngineEffects;
    private renderShieldEffects;
    toggleSystem(systemType: ShipSystemType): void;
    selectWeapon(weaponType: WeaponType): void;
    getSystemStatus(systemType: ShipSystemType): ShipSystem | undefined;
    getWeaponStatus(weaponType: WeaponType): Weapon | undefined;
    takeDamage(amount: number): void;
    rechargeShields(deltaTime: number): void;
    canWarp(): boolean;
    initiateWarp(): void;
}
