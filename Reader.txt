# Space Explorer 16-Bit - TypeScript Edition

🚀 A retro-style space exploration game built with TypeScript and HTML5 Canvas.

## 🎮 Game Features

- **16-bit retro graphics** with pixel-perfect rendering
- **Realistic physics** with Newtonian motion and gravity
- **Complex ship systems** (reactor, engines, shields, weapons, life support)
- **Procedural star system generation**
- **Advanced UI** with detailed status displays
- **Multiple weapon systems** (lasers, missiles, railguns)
- **Resource management** (fuel, energy, hull integrity)
- **Touch/mobile support** with virtual controls

## 🛠️ Technology Stack

- **TypeScript 5.1+** - Strong typing and modern JavaScript features
- **HTML5 Canvas** - High-performance 2D rendering
- **ES2020 Modules** - Modern module system
- **Vite** - Fast development and build tool
- **ESLint + Prettier** - Code quality and formatting

## 📁 Project Structure

```
space-explorer-typescript/
├── src/
│   ├── types.ts          # Core TypeScript interfaces and types
│   ├── utils.ts          # Utility functions and physics engine
│   ├── input.ts          # Input management system
│   ├── renderer.ts       # Canvas rendering system
│   ├── camera.ts         # Camera and viewport management
│   ├── player.ts         # Player ship implementation
│   └── main.ts           # Main game engine and initialization
├── dist/                 # Compiled JavaScript output
├── index.html           # Main HTML file
├── tsconfig.json        # TypeScript configuration
├── package.json         # Project dependencies and scripts
└── README.md           # This file
```

## 🚀 Quick Start

### Prerequisites

- Node.js 16+
- npm 8+

### Installation

1. **Clone or download the project files**
1. **Install dependencies:**
   
   ```bash
   npm install
   ```
1. **Build the TypeScript code:**
   
   ```bash
   npm run build
   ```
1. **Start the development server:**
   
   ```bash
   npm run dev
   ```
1. **Open your browser** to `http://localhost:5173`

## 🔧 Development Scripts

|Command              |Description                               |
|---------------------|------------------------------------------|
|`npm run build`      |Compile TypeScript to JavaScript          |
|`npm run build:watch`|Watch mode compilation                    |
|`npm run dev`        |Start Vite development server             |
|`npm run preview`    |Preview production build                  |
|`npm run lint`       |Run ESLint code analysis                  |
|`npm run format`     |Format code with Prettier                 |
|`npm run type-check` |Check TypeScript types without compilation|

## 🎯 Game Controls

### Keyboard

- **WASD** or **Arrow Keys** - Ship movement
- **Space** - Fire weapons
- **ESC** - Pause/Menu
- **1-4** - Select weapon systems
- **Tab** - Toggle systems panel

### Mouse

- **Click** - Fire weapons
- **Scroll** - Zoom camera

### Touch (Mobile)

- **Virtual joystick** - Movement
- **Tap** - Fire weapons

## 🏗️ Architecture Overview

### Core Systems

1. **Type System** (`types.ts`)
- Comprehensive TypeScript interfaces
- Strong typing for all game objects
- Extensible architecture
1. **Physics Engine** (`utils.ts`)
- Newtonian motion simulation
- Gravity calculations
- Collision detection
1. **Input Management** (`input.ts`)
- Cross-platform input handling
- Keyboard, mouse, and touch support
- Virtual controls for mobile
1. **Rendering System** (`renderer.ts`)
- HTML5 Canvas abstraction
- Efficient 2D rendering
- Pixel-perfect graphics
1. **Game Objects** (`player.ts`)
- Component-based architecture
- Complex ship systems
- Resource management

### Design Patterns

- **Component System** - Modular ship systems and components
- **State Management** - Clean game state transitions
- **Observer Pattern** - Event-driven system interactions
- **Factory Pattern** - Procedural content generation

## 📊 Performance Features

- **Efficient rendering** with object culling
- **Optimized physics** calculations
- **Memory management** with object pooling
- **Scalable architecture** for large game worlds

## 🔍 Code Quality

- **100% TypeScript** - Full type safety
- **Comprehensive interfaces** - Clear contracts
- **Modular design** - Easy to extend and maintain
- **Documentation** - Inline comments and documentation

## 🚧 Development Roadmap

### Phase 1 - Core Systems ✅

- [x] TypeScript conversion
- [x] Basic game loop
- [x] Input system
- [x] Rendering pipeline

### Phase 2 - Game Features 🚧

- [ ] Complete celestial body system
- [ ] Advanced UI components
- [ ] Save/load system
- [ ] Sound system

### Phase 3 - Content 📋

- [ ] Multiple star systems
- [ ] Trading mechanics
- [ ] Story campaign
- [ ] Multiplayer support

## 🐛 Known Issues

- Mobile touch controls need refinement
- Performance optimization for large star systems
- Audio system not yet implemented

## 🤝 Contributing

1. Fork the repository
1. Create a feature branch: `git checkout -b feature/amazing-feature`
1. Commit changes: `git commit -m 'Add amazing feature'`
1. Push to branch: `git push origin feature/amazing-feature`
1. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🙏 Acknowledgments

- Inspired by classic space exploration games
- Built with modern web technologies
- TypeScript community for excellent tooling

-----

**Happy exploring! 🌌**